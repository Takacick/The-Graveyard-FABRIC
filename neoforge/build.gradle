plugins {
	id "com.github.johnrengelman.shadow" version "7.1.2"
}

allprojects {
	archivesBaseName = "${rootProject.mod_id}-neoforge-mc${rootProject.minecraft_version}"
}


architectury {
	platformSetupLoomIde()
	neoForge()
}

configurations {
	common
	shadowCommon
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentNeoForge.extendsFrom common
}

loom {
	accessWidenerPath = project(":common").loom.accessWidenerPath
}

dependencies {
	neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"

	implementation "software.bernie.geckolib:geckolib-neoforge-${rootProject.minecraft_version}:${rootProject.geckolib_version_neoforge}"

	common(project(path: ":common", configuration: "namedElements")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }
}


processResources {
	inputs.property "version", project.version

	filesMatching("META-INF/mods.toml") {
		expand "version": project.version
	}
}

shadowJar {
	exclude "fabric.mod.json"
	exclude "architectury.common.json"

	configurations = [project.configurations.shadowCommon]
	archiveClassifier.set("dev-shadow")
}

remapJar {
	inputFile.set shadowJar.archiveFile
	dependsOn shadowJar
	archiveClassifier.set(null)
	atAccessWideners.add("${rootProject.mod_id}.accesswidener")
}

jar {
	archiveClassifier.set("dev")
}

sourcesJar {
	def commonSources = project(":common").sourcesJar
	dependsOn commonSources
	from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

repositories {
	maven {
		name = 'NeoForged'
		url = 'https://maven.neoforged.net/'
	}

	maven { url "https://www.cursemaven.com" }
}